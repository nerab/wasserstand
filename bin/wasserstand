#!/usr/bin/env ruby

require 'bundler'
Bundler.require

require 'wasserstand'
require 'optparse'

options = {}

OptionParser.new do |opts|
  opts.banner = <<HERE
Wasserstand provides water level information as provided by PegelOnline.

Usage:
    #{File.basename($0)} [options] [WATERWAY | LEVEL]

Author:
    Nicolas E. Rabenau nerab@gmx.at

Homepage:
    http://github.com/nerab/wasserstand

Options:
HERE

  opts.on("-w", "--verbose", "Run verbosely") do |v|
    Wasserstand.logger.level = Log4r::INFO
    Wasserstand.logger.info("Enable info logger")
  end

  opts.on("-t", "--trace", "Run with traces enabled") do |v|
    Wasserstand.logger.level = Log4r::ALL
    Wasserstand.logger.debug("Enable debug logger")
  end

  opts.on("-u", "--url URL", "Use URL to fetch levels") do |url|
    options[:url] = url
  end

  opts.on("-c", "--cache [URL]", "Use memcached at URL, defaults to 127.0.0.1:11211") do |url|
    options[:cache] = url || '127.0.0.1:11211'
  end
end.parse!

Wasserstand.provider = Wasserstand::Provider::PegelOnline.new(options[:url])

if options[:cache].nil?
  Wasserstand.provider.cache = Wasserstand::HeapCache.new
else
  Bundler.require(:default, :dalli)
  Wasserstand.logger.info("Using memcached at #{options[:cache]}")
  Wasserstand.provider.cache = Dalli::Client.new(options[:cache], :expires_in => 60 * 60)
end

query = ARGV.shift

if query.nil?
  STDERR.puts "The following waterways are available:"
  Wasserstand::Waterway.all.each{|ww| puts ww.name}
else
  begin
    waterway = Wasserstand::Waterway[query]

    if waterway
      STDERR.puts "Waterway #{waterway.name} has #{waterway.levels.size} levels:"
      waterway.levels.sort_by{|name, level| level.km}.each{|name, level| puts name}
    else
      level = Wasserstand::Level[query]

      if level.nil?
        STDERR.puts "#{File.basename($0)}: No waterway nor level found that matches '#{query}."
      else
        STDERR.puts "Level #{level.name} (#{level.waterway}, km #{level.km}):"
        level.measurements.each{|measurement| puts measurement}
      end
    end
  rescue
    STDERR.puts $!
    $!.backtrace.each{|msg| Wasserstand.logger.debug(msg)}
  end
end
