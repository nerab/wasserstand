#!/usr/bin/env ruby

require 'bundler'
Bundler.require

require 'wasserstand'
require 'optparse'

options = {}

params = OptionParser.new do |opts|
  opts.banner = <<HERE
Shows water level information as provided by PegelOnline.

Usage:
    #{File.basename($0)} [options] [WATERWAY | LEVEL | WATERWAY LEVEL]

Examples:
    # all waterways
    #{File.basename($0)}

    # single waterway
    #{File.basename($0)} Rhein

    # single level
    #{File.basename($0)} Koblenz

    # single level that happens to have the same name as a waterway
    #{File.basename($0)} Ilm Ilmenau

Author:
    Nicolas E. Rabenau nerab@gmx.at

Homepage:
    http://github.com/nerab/wasserstand

Options:
HERE

  opts.on("-w", "--verbose", "Run verbosely") do |v|
    Wasserstand.logger.level = Log4r::INFO
    Wasserstand.logger.info("Enable info logger")
  end

  opts.on("-t", "--trace", "Run with traces enabled") do |v|
    Wasserstand.logger.level = Log4r::ALL
    Wasserstand.logger.debug("Enable debug logger")
  end

  opts.on("-u", "--url URL", "Use URL to fetch levels") do |url|
    options[:url] = url
  end

  opts.on("-c", "--cache [URL]", "Use memcached at URL instead of heap. URL defaults to 127.0.0.1:11211.") do |url|
    options[:cache] = url || '127.0.0.1:11211'
  end
end.parse!

Wasserstand.provider = Wasserstand::Provider::PegelOnline.new(options[:url])

if options[:cache].nil?
  Wasserstand.provider.cache = Wasserstand::HeapCache.new
else
  Bundler.require(:default, :dalli)
  Wasserstand.logger.info("Using memcached at #{options[:cache]}")
  Wasserstand.provider.cache = Dalli::Client.new(options[:cache], :expires_in => 60 * 60)
end

begin
  Wasserstand::Commandline.get(params)
rescue
  STDERR.puts $!
  $!.backtrace.each{|msg| Wasserstand.logger.debug(msg)}
end
